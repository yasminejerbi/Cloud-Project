{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet UpdateProfileComponent = class UpdateProfileComponent {\n  constructor(formBuilder, service, router) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.router = router;\n    this.length = 0;\n    this.i = 0;\n    this.RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n      role: new FormControl('', [Validators.required]),\n      interet: new FormControl('', [Validators.required])\n    });\n  }\n  persistUser() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenomUtilisateur: formData.prenomUtilisateur,\n        email: formData.email,\n        numTel: formData.numTel,\n        motDePasse: formData.motDePasse,\n        role: formData.role,\n        interet: formData.interet\n      };\n      this.service.ajouterUser(UserData).subscribe(response => {\n        this.router.navigate(['login']);\n        console.log('Utilisateur ajoutée avec succès :', response);\n        // Optionally, provide feedback to the user that registration was successful\n      }, error => {\n        console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n        // Check the error status and handle it appropriately\n        if (error.status === 400) {\n          // Bad request error, handle validation errors or other issues\n          // You can access error.error to get the detailed error message from the server\n          // Provide feedback to the user about the error\n        } else {\n          // Handle other types of errors (e.g., server down, network error)\n          // Provide appropriate feedback to the user\n        }\n      });\n    }\n  }\n  ngOnInit() {}\n};\nUpdateProfileComponent = __decorate([Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.css']\n})], UpdateProfileComponent);\nexport { UpdateProfileComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAOlC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAO/BC,YAAoBC,WAAwB,EAAUC,OAAoB,EAAUC,MAAa;IAA7E,gBAAW,GAAXF,WAAW;IAAuB,YAAO,GAAPC,OAAO;IAAuB,WAAM,GAANC,MAAM;IAE1F,WAAM,GAAQ,CAAC;IACd,MAAC,GAAQ,CAAC;IACX,iBAAY,GAAG,IAAIC,SAAS,CAAC;MAC3BC,cAAc,EAAE,IAAIC,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnFC,iBAAiB,EAAE,IAAIJ,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACtFE,KAAK,EAAE,IAAIL,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACI,KAAK,CAAC,CAAC;MACnEC,UAAU,EAAE,IAAIN,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACE,SAAS,CAAC,CAAC,CAAC,EAC1EF,UAAU,CAACM,OAAO,CAAC,uCAAuC,CAAC,CAAC,CAAC;MAChEC,MAAM,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,EAAED,UAAU,CAACM,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;MAClFE,IAAI,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,CAAC,CAAC;MAChDQ,OAAO,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACC,QAAQ,CAAC;KACnD,CAAC;EAbmG;EAerGS,WAAW;IACT,IAAI,IAAI,CAACC,YAAY,CAACC,KAAK,EAAE;MAC3B,MAAMC,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACG,KAAK;MACxC,MAAMC,QAAQ,GAAQ;QACpBjB,cAAc,EAAEe,QAAQ,CAACf,cAAc;QACvCK,iBAAiB,EAAEU,QAAQ,CAACV,iBAAiB;QAC7CC,KAAK,EAAES,QAAQ,CAACT,KAAK;QACrBG,MAAM,EAAEM,QAAQ,CAACN,MAAM;QACvBF,UAAU,EAAEQ,QAAQ,CAACR,UAAU;QAC/BG,IAAI,EAACK,QAAQ,CAACL,IAAI;QAClBC,OAAO,EAACI,QAAQ,CAACJ;OAClB;MAED,IAAI,CAACd,OAAO,CAACqB,WAAW,CAACD,QAAQ,CAAC,CAACE,SAAS,CACzCC,QAAQ,IAAI;QAEX,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;QAE/BC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEH,QAAQ,CAAC;QAC1D;MACF,CAAC,EACAI,KAAwB,IAAI;QAC3BF,OAAO,CAACE,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;QACnE;QACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB;UACA;UACA;QAAA,CACD,MAAM;UACL;UACA;QAAA;MAEJ,CAAC,CACF;;EAEL;EAEAC,QAAQ,IACR;CAED;AA9DUhC,sBAAsB,eALlCD,SAAS,CAAC;EACTkC,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACWnC,sBAAsB,CA8DhC;SA9DUA,sBAAsB","names":["Component","UpdateProfileComponent","constructor","formBuilder","service","router","FormGroup","nomUtilisateur","FormControl","Validators","required","minLength","prenomUtilisateur","email","motDePasse","pattern","numTel","role","interet","persistUser","RegisterForm","valid","formData","value","UserData","ajouterUser","subscribe","response","navigate","console","log","error","status","ngOnInit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\update-profile\\update-profile.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.css']\n})\nexport class UpdateProfileComponent {\n\n\n  \n\n\n   \n    constructor(private formBuilder: FormBuilder, private service: UserService, private router:Router) { }\n    listUser!: User[];\n    length:number=0;\n     i:number=0;\n    RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8),\n         Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n      role: new FormControl('', [Validators.required]),\n      interet: new FormControl('', [Validators.required]),\n    });\n  \n    persistUser() {\n      if (this.RegisterForm.valid) {\n        const formData = this.RegisterForm.value;\n        const UserData: any = {\n          nomUtilisateur: formData.nomUtilisateur,\n          prenomUtilisateur: formData.prenomUtilisateur,\n          email: formData.email,\n          numTel: formData.numTel,\n          motDePasse: formData.motDePasse,\n          role:formData.role,\n          interet:formData.interet,\n        };\n  \n        this.service.ajouterUser(UserData).subscribe(\n          (response) => {\n  \n            this.router.navigate(['login'])\n  \n            console.log('Utilisateur ajoutée avec succès :', response);\n            // Optionally, provide feedback to the user that registration was successful\n          },\n          (error: HttpErrorResponse) => {\n            console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n            // Check the error status and handle it appropriately\n            if (error.status === 400) {\n              // Bad request error, handle validation errors or other issues\n              // You can access error.error to get the detailed error message from the server\n              // Provide feedback to the user about the error\n            } else {\n              // Handle other types of errors (e.g., server down, network error)\n              // Provide appropriate feedback to the user\n            }\n          }\n        );\n      }\n    }\n  \n    ngOnInit(): void {\n    }\n  \n  }\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}