{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('[0-9]{8}')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')])\n    });\n  }\n  persistUser() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenom: formData.prenomUtilisateur,\n        mail: formData.email,\n        telephone: formData.numTel,\n        password: formData.motDePasse\n      };\n      this.service.ajouterUser(UserData).subscribe(response => {\n        console.log('Utilisateur ajoutée avec succès :', response);\n        // Optionally, provide feedback to the user that registration was successful\n      }, error => {\n        console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n        // Check the error status and handle it appropriately\n        if (error.status === 400) {\n          // Bad request error, handle validation errors or other issues\n          // You can access error.error to get the detailed error message from the server\n          // Provide feedback to the user about the error\n        } else {\n          // Handle other types of errors (e.g., server down, network error)\n          // Provide appropriate feedback to the user\n        }\n      });\n    }\n  }\n  ngOnInit() {\n    // Initialization logic here\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAqB,gBAAgB;AASzE,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5BC,YAAoBC,WAAwB,EAAUC,OAAoB;IAAtD,gBAAW,GAAXD,WAAW;IAAuB,YAAO,GAAPC,OAAO;IAE7D,iBAAY,GAAG,IAAIL,SAAS,CAAC;MAC3BM,cAAc,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnFC,iBAAiB,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACtFE,KAAK,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACS,KAAK,CAAC,CAAC;MACnEC,UAAU,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACO,SAAS,CAAC,CAAC,CAAC,EAAEP,UAAU,CAACW,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;MAC/GC,MAAM,EAAE,IAAId,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACW,OAAO,CAAC,UAAU,CAAC,CAAC;KAClF,CAAC;EAR4E;EAU9EE,WAAW;IACT,IAAI,IAAI,CAACC,YAAY,CAACC,KAAK,EAAE;MAC3B,MAAMC,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACG,KAAK;MACxC,MAAMC,QAAQ,GAAQ;QACpBb,cAAc,EAAEW,QAAQ,CAACX,cAAc;QACvCc,MAAM,EAAEH,QAAQ,CAACR,iBAAiB;QAClCY,IAAI,EAAEJ,QAAQ,CAACP,KAAK;QACpBY,SAAS,EAAEL,QAAQ,CAACJ,MAAM;QAC1BU,QAAQ,EAAEN,QAAQ,CAACN;OACpB;MAED,IAAI,CAACN,OAAO,CAACmB,WAAW,CAACL,QAAQ,CAAC,CAACM,SAAS,CACzCC,QAAQ,IAAI;QACXC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,QAAQ,CAAC;QAC1D;MACF,CAAC,EACAG,KAAwB,IAAI;QAC3BF,OAAO,CAACE,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;QACnE;QACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB;UACA;UACA;QAAA,CACD,MAAM;UACL;UACA;QAAA;MAEJ,CAAC,CACF;;EAEL;EAEAC,QAAQ;IACN;EAAA;CAEH;AA/CY7B,iBAAiB,eAL7BJ,SAAS,CAAC;EACTkC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACWhC,iBAAiB,CA+C7B;SA/CYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","formBuilder","service","nomUtilisateur","required","minLength","prenomUtilisateur","email","motDePasse","pattern","numTel","persistUser","RegisterForm","valid","formData","value","UserData","prenom","mail","telephone","password","ajouterUser","subscribe","response","console","log","error","status","ngOnInit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { UserService } from 'src/app/services/User.service';\nimport { HttpErrorResponse } from '@angular/common/http';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n \n  constructor(private formBuilder: FormBuilder, private service: UserService) { }\n\n  RegisterForm = new FormGroup({\n    nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    motDePasse: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('[0-9]{8}')]),\n    numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n  });\n\n  persistUser() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData: any = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenom: formData.prenomUtilisateur,\n        mail: formData.email,\n        telephone: formData.numTel,\n        password: formData.motDePasse\n      };\n\n      this.service.ajouterUser(UserData).subscribe(\n        (response) => {\n          console.log('Utilisateur ajoutée avec succès :', response);\n          // Optionally, provide feedback to the user that registration was successful\n        },\n        (error: HttpErrorResponse) => {\n          console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n          // Check the error status and handle it appropriately\n          if (error.status === 400) {\n            // Bad request error, handle validation errors or other issues\n            // You can access error.error to get the detailed error message from the server\n            // Provide feedback to the user about the error\n          } else {\n            // Handle other types of errors (e.g., server down, network error)\n            // Provide appropriate feedback to the user\n          }\n        }\n      );\n    }\n  }\n\n  ngOnInit() {\n    // Initialization logic here\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}