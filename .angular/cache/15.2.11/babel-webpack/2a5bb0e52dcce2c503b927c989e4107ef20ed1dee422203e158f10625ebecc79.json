{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  ngOnInit() {}\n  onSubmit() {\n    if (this.RegisterForm.valid) {\n      // Do something when the form is submitted\n    }\n  }\n  onInterestChange(event) {\n    const target = event.target;\n    const interet = target.value;\n    if (interet) {\n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n      switch (interet) {\n        case 'sport':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'music':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'tech':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'photographie':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'design':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'dessin':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'robots':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  onRoleChange(event) {\n    const target = event.target;\n    const role = target.value;\n    if (role) {\n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n      switch (role) {\n        case 'super_admin':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'admin_club':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'user':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  persistreclamation(formData) {\n    //const userAmal = this.users.find(user => user.firstName === 'amal');\n    const UserData = {\n      nomUtilisateur: formData.nomUtilisateur,\n      prenomUtilisateur: formData.prenomUtilisateur,\n      email: formData.email,\n      numTel: formData.numTel,\n      motDePasse: formData.motDePasse,\n      photo: formData.photo\n    };\n    this.service.ajouterreclamation(UserData).subscribe(response => {\n      console.log('Utilisateur ajoutée avec succès :', response);\n      this.ngOnInit();\n      this.router.navigate(['/profile']);\n    }, error => {\n      console.error('Erreur lors de l\\'ajout  utilisateur :', error);\n    });\n  }\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    //constructor(private formBuilder: FormBuilder) { }\n    this.RegisterForm = new FormGroup({\n      nom: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenom: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('[0-9]{8}')]),\n      telephone: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')])\n    });\n    this.User = [];\n    this.showNameField = false;\n    this.showDateField = false;\n    this.showDescriptionField = false;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","ngOnInit","onSubmit","RegisterForm","valid","onInterestChange","event","target","interet","value","showNameField","showDateField","showDescriptionField","onRoleChange","role","persistreclamation","formData","UserData","nomUtilisateur","prenomUtilisateur","email","numTel","motDePasse","photo","service","ajouterreclamation","subscribe","response","console","log","router","navigate","error","constructor","nom","required","minLength","prenom","password","pattern","telephone","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators ,FormBuilder} from '@angular/forms';\nimport { UserService } from 'src/app/services/User.service';\nimport { User } from 'src/app/model/User';\nimport {Router} from ''\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n \n  //constructor(private formBuilder: FormBuilder) { }\n  RegisterForm = new FormGroup({\n    nom : new FormControl('',[Validators.required,Validators.minLength(3)]),\n  prenom : new FormControl('',[Validators.required,Validators.minLength(3)]),\n  email : new FormControl('',[Validators.required,Validators.email]),\n  password : new FormControl('',[Validators.required,Validators.minLength(8),\n    Validators.pattern('[0-9]{8}')]),\n  telephone : new FormControl('',[Validators.required,Validators.pattern('[0-9]{8}')]),\n  });\n\n  ngOnInit(): void {\n\n  }\n\n  onSubmit() {\n    if (this.RegisterForm.valid) {\n      // Do something when the form is submitted\n    }\n  }\n  User: User[] = []; \n\n  showNameField: boolean = false;\n  showDateField: boolean = false;\n  showDescriptionField: boolean = false;\n\n  onInterestChange(event: Event) {\n    const target = event.target as HTMLSelectElement;\n    const interet = target.value;\n\n    if (interet) {\n     \n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n\n      switch (interet) {\n        case 'sport':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n\n          break;\n        case 'music':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'tech':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n          case 'photographie':\n            this.showNameField = true;\n            this.showDateField = true;\n            this.showDescriptionField = true;\n            break;\n            case 'design':\n              this.showNameField = true;\n              this.showDateField = true;\n              this.showDescriptionField = true;\n              break;\n              case 'dessin':\n                this.showNameField = true;\n                this.showDateField = true;\n                this.showDescriptionField = true;\n                break;\n                case 'robots':\n                  this.showNameField = true;\n                  this.showDateField = true;\n                  this.showDescriptionField = true;\n                  break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  onRoleChange(event: Event) {\n    const target = event.target as HTMLSelectElement;\n    const role = target.value;\n    if (role) {\n     \n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n\n      switch (role) {\n        case 'super_admin':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n\n          break;\n        case 'admin_club':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'user':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  persistreclamation(formData: any) {\n    //const userAmal = this.users.find(user => user.firstName === 'amal');\n\n    const UserData: User = {\n      nomUtilisateur:formData.nomUtilisateur,\n       prenomUtilisateur:formData.prenomUtilisateur ,\n        email:formData.email ,\n       numTel:formData.numTel ,\n        motDePasse:formData.motDePasse ,\n        photo:formData.photo ,\n\n    };\n\n    this.service.ajouterreclamation(UserData).subscribe((response) => {\n      console.log('Utilisateur ajoutée avec succès :', response);\n      this.ngOnInit();\n      this.router.navigate(['/profile']); \n    }, (error) => {\n      console.error('Erreur lors de l\\'ajout  utilisateur :', error);\n    });\n  }\n\n  constructor(private service: UserService, private router: Router) { }\n\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}