{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, service) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.RegisterForm = new FormGroup({\n      nom: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenom: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('[0-9]{8}')]),\n      telephone: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')])\n    });\n    /*\r\n      ngOnInit(): void {\r\n    \r\n      }*/\n    /*onSubmit() {\r\n      if (this.RegisterForm.valid) {\r\n        \r\n      }\r\n      \r\n    }*/\n    this.User = [];\n    this.showNameField = false;\n    this.showDateField = false;\n    this.showDescriptionField = false;\n  }\n  onInterestChange(event) {\n    const target = event.target;\n    const interet = target.value;\n    if (interet) {\n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n      switch (interet) {\n        case 'sport':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'music':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'tech':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'photographie':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'design':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'dessin':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'robots':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  onRoleChange(event) {\n    const target = event.target;\n    const role = target.value;\n    if (role) {\n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n      switch (role) {\n        case 'super_admin':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'admin_club':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'user':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  persistUser() {\n    //const userAmal = this.users.find(user => user.firstName === 'amal');\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData = {\n        nom: formData.nom,\n        prenom: formData.prenom,\n        mail: formData.email,\n        telephone: formData.telephone,\n        password: formData.password\n      };\n      this.service.ajouterUser(UserData).subscribe(response => {\n        console.log('Utilisateur ajoutée avec succès :', response);\n        this.ngOnInit();\n      }, error => {\n        console.error('Erreur lors de l\\'ajout  utilisateur :', error);\n      });\n    }\n  }\n  ngOnInit() {}\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","formBuilder","service","nom","required","minLength","prenom","email","password","pattern","telephone","onInterestChange","event","target","interet","value","showNameField","showDateField","showDescriptionField","onRoleChange","role","persistUser","RegisterForm","valid","formData","UserData","mail","ajouterUser","subscribe","response","console","log","ngOnInit","error","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators ,FormBuilder} from '@angular/forms';\nimport { UserService } from 'src/app/services/User.service';\nimport { User } from 'src/app/model/User';\nimport {Router} from '@angular/router'\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n \n  constructor(private formBuilder: FormBuilder,private service:U) { \n\n  }\n  RegisterForm = new FormGroup({\n    nom : new FormControl('',[Validators.required,Validators.minLength(3)]),\n  prenom : new FormControl('',[Validators.required,Validators.minLength(3)]),\n  email : new FormControl('',[Validators.required,Validators.email]),\n  password : new FormControl('',[Validators.required,Validators.minLength(8),\n    Validators.pattern('[0-9]{8}')]),\n  telephone : new FormControl('',[Validators.required,Validators.pattern('[0-9]{8}')]),\n  });\n/*\n  ngOnInit(): void {\n\n  }*/\n\n  /*onSubmit() {\n    if (this.RegisterForm.valid) {\n      \n    }\n    \n  }*/\n \n  User: User[] = []; \n\n  showNameField: boolean = false;\n  showDateField: boolean = false;\n  showDescriptionField: boolean = false;\n\n  onInterestChange(event: Event) {\n    const target = event.target as HTMLSelectElement;\n    const interet = target.value;\n\n    if (interet) {\n     \n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n\n      switch (interet) {\n        case 'sport':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n\n          break;\n        case 'music':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'tech':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n          case 'photographie':\n            this.showNameField = true;\n            this.showDateField = true;\n            this.showDescriptionField = true;\n            break;\n            case 'design':\n              this.showNameField = true;\n              this.showDateField = true;\n              this.showDescriptionField = true;\n              break;\n              case 'dessin':\n                this.showNameField = true;\n                this.showDateField = true;\n                this.showDescriptionField = true;\n                break;\n                case 'robots':\n                  this.showNameField = true;\n                  this.showDateField = true;\n                  this.showDescriptionField = true;\n                  break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  onRoleChange(event: Event) {\n    const target = event.target as HTMLSelectElement;\n    const role = target.value;\n    if (role) {\n     \n      this.showNameField = false;\n      this.showDateField = false;\n      this.showDescriptionField = false;\n\n      switch (role) {\n        case 'super_admin':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n\n          break;\n        case 'admin_club':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        case 'user':\n          this.showNameField = true;\n          this.showDateField = true;\n          this.showDescriptionField = true;\n          break;\n        // Add other cases as needed\n        default:\n          break;\n      }\n    }\n  }\n  persistUser() {\n    //const userAmal = this.users.find(user => user.firstName === 'amal');\n      if(this.RegisterForm.valid){\n        const formData=this.RegisterForm.value;\n    const UserData: User = {\n       nom:formData.nom,\n       prenom:formData.prenom ,\n        mail:formData.email ,\n        telephone:formData.telephone ,\n        password:formData.password ,\n        \n\n    };\n\n    this.service.ajouterUser(UserData).subscribe((response) => {\n      console.log('Utilisateur ajoutée avec succès :', response);\n      this.ngOnInit();\n   \n    }, (error) => {\n      console.error('Erreur lors de l\\'ajout  utilisateur :', error);\n    });\n  }}\n\n  \n  ngOnInit(){\n   \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}