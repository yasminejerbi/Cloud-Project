{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UpdateProfileComponent = class UpdateProfileComponent {\n  constructor(formBuilder, service, router, act) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.router = router;\n    this.act = act;\n    this.RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n      role: new FormControl('', [Validators.required]),\n      interet: new FormControl('', [Validators.required])\n    });\n  }\n  save() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenomUtilisateur: formData.prenomUtilisateur,\n        email: formData.email,\n        numTel: formData.numTel,\n        motDePasse: formData.motDePasse,\n        role: formData.role,\n        interet: formData.interet\n      };\n      this.service.updateUser(this.RegisterForm.value).subscribe(() => this.router.navigate(['profile', this.id]));\n    }\n  }\n  ngOnInit() {\n    this.id = this.act.snapshot.params['id'];\n    //4- recuperation du produit par id\n    this.service.getUserById(this.id).subscribe(data => {\n      this.user = data,\n      //5- remplir le formulaire par les données du produit\n      this.RegisterForm.patchValue(this.user);\n    });\n  }\n};\nUpdateProfileComponent = __decorate([Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.css']\n})], UpdateProfileComponent);\nexport { UpdateProfileComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","UpdateProfileComponent","constructor","formBuilder","service","router","act","nomUtilisateur","required","minLength","prenomUtilisateur","email","motDePasse","pattern","numTel","role","interet","save","RegisterForm","valid","formData","value","UserData","updateUser","subscribe","navigate","id","ngOnInit","snapshot","params","getUserById","data","user","patchValue","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\update-profile\\update-profile.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { UserService } from 'src/app/services/User.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Role, User } from '../model/User';\nimport { ActivatedRoute, Router } from '@angular/router';\n@Component({\n  selector: 'app-update-profile',\n  templateUrl: './update-profile.component.html',\n  styleUrls: ['./update-profile.component.css']\n})\nexport class UpdateProfileComponent {\n constructor(private formBuilder: FormBuilder, private service: UserService, private router:Router,private act :ActivatedRoute) { }\n    user!:User;\n    id!:number;\n    RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8),\n         Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n      role: new FormControl('', [Validators.required]),\n      interet: new FormControl('', [Validators.required]),\n    });\n  \n    save() {\n      if (this.RegisterForm.valid) {\n        const formData = this.RegisterForm.value;\n        const UserData: any = {\n          nomUtilisateur: formData.nomUtilisateur,\n          prenomUtilisateur: formData.prenomUtilisateur,\n          email: formData.email,\n          numTel: formData.numTel,\n          motDePasse: formData.motDePasse,\n          role:formData.role,\n          interet:formData.interet,\n        };\n  \n        this.service.updateUser(this.RegisterForm.value as any).subscribe(\n          ()=>this.router.navigate(['profile',this.id])\n        )\n      }\n    }\n  \n    ngOnInit(): void {\n      this.id=this.act.snapshot.params['id'];\n      //4- recuperation du produit par id\n      this.service.getUserById(this.id).subscribe(\n        (data)=>{\n          this.user=data,\n          //5- remplir le formulaire par les données du produit\n          this.RegisterForm.patchValue(this.user as any)\n        }\n      )\n    }\n  \n  }\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}