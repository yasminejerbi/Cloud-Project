{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UpdateProfileComponent = class UpdateProfileComponent {};\nUpdateProfileComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], UpdateProfileComponent);\nexport { UpdateProfileComponent };\nexport class RegisterComponent {\n  constructor(formBuilder, service, router) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.router = router;\n    this.length = 0;\n    this.i = 0;\n    this.RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n      role: new FormControl('', [Validators.required]),\n      interet: new FormControl('', [Validators.required])\n    });\n  }\n  persistUser() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenomUtilisateur: formData.prenomUtilisateur,\n        email: formData.email,\n        numTel: formData.numTel,\n        motDePasse: formData.motDePasse,\n        role: formData.role,\n        interet: formData.interet\n      };\n      this.service.ajouterUser(UserData).subscribe(response => {\n        this.router.navigate(['login']);\n        console.log('Utilisateur ajoutée avec succès :', response);\n        // Optionally, provide feedback to the user that registration was successful\n      }, error => {\n        console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n        // Check the error status and handle it appropriately\n        if (error.status === 400) {\n          // Bad request error, handle validation errors or other issues\n          // You can access error.error to get the detailed error message from the server\n          // Provide feedback to the user about the error\n        } else {\n          // Handle other types of errors (e.g., server down, network error)\n          // Provide appropriate feedback to the user\n        }\n      });\n    }\n  }\n  ngOnInit() {}\n}","map":{"version":3,"mappings":"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","names":["Component","FormControl","FormGroup","Validators","UpdateProfileComponent","selector","templateUrl","styleUrls","RegisterComponent","constructor","formBuilder","service","router","nomUtilisateur","required","minLength","prenomUtilisateur","email","motDePasse","pattern","numTel","role","interet","persistUser","RegisterForm","valid","formData","value","UserData","ajouterUser","subscribe","response","navigate","console","log","error","status","ngOnInit"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\update-profile\\update-profile.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { UserService } from 'src/app/services/User.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Role, User } from '../model/User';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class UpdateProfileComponent {\n\n\n  export class RegisterComponent implements OnInit {\n   \n    constructor(private formBuilder: FormBuilder, private service: UserService, private router:Router) { }\n    listUser!: User[];\n    length:number=0;\n     i:number=0;\n    RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8),\n         Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n      role: new FormControl('', [Validators.required]),\n      interet: new FormControl('', [Validators.required]),\n    });\n  \n    persistUser() {\n      if (this.RegisterForm.valid) {\n        const formData = this.RegisterForm.value;\n        const UserData: any = {\n          nomUtilisateur: formData.nomUtilisateur,\n          prenomUtilisateur: formData.prenomUtilisateur,\n          email: formData.email,\n          numTel: formData.numTel,\n          motDePasse: formData.motDePasse,\n          role:formData.role,\n          interet:formData.interet,\n        };\n  \n        this.service.ajouterUser(UserData).subscribe(\n          (response) => {\n  \n            this.router.navigate(['login'])\n  \n            console.log('Utilisateur ajoutée avec succès :', response);\n            // Optionally, provide feedback to the user that registration was successful\n          },\n          (error: HttpErrorResponse) => {\n            console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n            // Check the error status and handle it appropriately\n            if (error.status === 400) {\n              // Bad request error, handle validation errors or other issues\n              // You can access error.error to get the detailed error message from the server\n              // Provide feedback to the user about the error\n            } else {\n              // Handle other types of errors (e.g., server down, network error)\n              // Provide appropriate feedback to the user\n            }\n          }\n        );\n      }\n    }\n  \n    ngOnInit(): void {\n    }\n  \n  }\n  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}