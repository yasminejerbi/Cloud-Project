{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet NavbarComponent = class NavbarComponent {\n  constructor(router) {\n    this.router = router;\n    this.isLoggedIn = false; // Variable pour suivre l'état de connexion\n  }\n  // Fonction pour gérer la connexion/déconnexion de l'utilisateur\n  toggleLogin() {\n    if (this.isLoggedIn) {\n      // Si l'utilisateur est connecté, déconnectez-le\n      this.isLoggedIn = false;\n      // Rediriger vers la page de connexion\n      this.router.navigate(['/login']);\n    } else {\n      // Si l'utilisateur n'est pas connecté, connectez-le\n      this.isLoggedIn = true;\n      // Peut-être rediriger vers une page d'accueil ou autre\n    }\n  }\n};\n\nNavbarComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})], NavbarComponent);\nexport { NavbarComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAQlC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAG1BC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;IAF1B,eAAU,GAAY,KAAK,CAAC,CAAC;EAES;EAEtC;EACAC,WAAW;IACT,IAAI,IAAI,CAACC,UAAU,EAAE;MACnB;MACA,IAAI,CAACA,UAAU,GAAG,KAAK;MACvB;MACA,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;KACjC,MAAM;MACL;MACA,IAAI,CAACD,UAAU,GAAG,IAAI;MACtB;;EAEJ;CACD;;AAlBYJ,eAAe,eAL3BD,SAAS,CAAC;EACTO,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWR,eAAe,CAkB3B;SAlBYA,eAAe","names":["Component","NavbarComponent","constructor","router","toggleLogin","isLoggedIn","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\navbar\\navbar.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent {\n  isLoggedIn: boolean = false; // Variable pour suivre l'état de connexion\n\n  constructor(private router: Router) { }\n\n  // Fonction pour gérer la connexion/déconnexion de l'utilisateur\n  toggleLogin() {\n    if (this.isLoggedIn) {\n      // Si l'utilisateur est connecté, déconnectez-le\n      this.isLoggedIn = false;\n      // Rediriger vers la page de connexion\n      this.router.navigate(['/login']);\n    } else {\n      // Si l'utilisateur n'est pas connecté, connectez-le\n      this.isLoggedIn = true;\n      // Peut-être rediriger vers une page d'accueil ou autre\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}