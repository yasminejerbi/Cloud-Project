{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': 'http://localhost:4200'\n  })\n};\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.ajouterurl = 'http://localhost:9000/pi/utilisateur/ajout';\n    this.verifyEmailUrl = 'http://localhost:9000/pi/utilisateur/verify-email';\n  }\n  /*ajouterUser(User: User): Observable<User> {\r\n   return this.http.post<User>(this.ajouterurl, User, httpOptions);\r\n  }*/\n  getAll() {\n    return this.http.get('http://localhost:9000/pi/utilisateur/getAll');\n  }\n  getUserById(id) {\n    return this.http.get('http://localhost:9000/pi/utilisateur/getUtilisateurId/' + id);\n  }\n  recupererMDP(email, numTel) {\n    return this.http.get('http://localhost:9000/pi/utilisateur/mdp/' + email + '/' + numTel);\n  }\n  updateUser(user) {\n    return this.http.put('http://localhost:9000/pi/utilisateur/updateUtilisateur', user);\n  }\n  verifyEmail(email) {\n    return this.http.post(this.verifyEmailUrl, {\n      email\n    }, httpOptions);\n  }\n  createEvent(event, image) {\n    const formData = new FormData();\n    formData.append('nomEvenement', event.nomEvenement);\n    formData.append('lieuEvenement', event.lieuEvenement);\n    formData.append('actionEvenement', event.actionEvenement);\n    formData.append('dateDebut', event.dateDebut.toString());\n    formData.append('dateFin', event.dateFin.toString());\n    formData.append('numPlaces', event.numPlaces.toString());\n    formData.append('eventType', event.eventType.toString()); // Assuming eventType is of type Event_type\n    //formData.append('image', image, image.name);\n    if (image) {\n      formData.append('photo', image, image.name);\n    }\n    const options = {\n      headers: new HttpHeaders()\n      // Uncomment below line if needed\n      // .set('Content-Type', 'multipart/form-data')\n    };\n\n    return this.http.post(`${this.apiUrl}/addEvent`, formData, options);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAAmBA,WAAW,QAA0B,sBAAsB;;;AAK9E,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIF,WAAW,CAAC;IAAE,cAAc,EAAE,kBAAkB;IAAE,6BAA6B,EAAE;EAAuB,CAAC;CACvH;AAID,OAAM,MAAOG,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,eAAU,GAAE,4CAA4C;IAIxD,mBAAc,GAAG,mDAAmD;EAFpC;EAGvC;;;EAGDC,MAAM;IACJ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,6CAA6C,CAAC;EAC7E;EACAC,WAAW,CAACC,EAAS;IACnB,OAAO,IAAI,CAACJ,IAAI,CAACE,GAAG,CAAO,wDAAwD,GAACE,EAAE,CAAC;EACzF;EACAC,YAAY,CAACC,KAAY,EAACC,MAAa;IACrC,OAAO,IAAI,CAACP,IAAI,CAACE,GAAG,CAAS,2CAA2C,GAACI,KAAK,GAAC,GAAG,GAACC,MAAM,CAAC;EAC5F;EACAC,UAAU,CAACC,IAAS;IAClB,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAC,wDAAwD,EAACD,IAAI,CAAC;EACrF;EACAE,WAAW,CAACL,KAAa;IACvB,OAAO,IAAI,CAACN,IAAI,CAACY,IAAI,CAAM,IAAI,CAACC,cAAc,EAAE;MAAEP;IAAK,CAAE,EAAEV,WAAW,CAAC;EACzE;EACAkB,WAAW,CAACC,KAAa,EAAEC,KAAkB;IAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEJ,KAAK,CAACK,YAAY,CAAC;IACnDH,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEJ,KAAK,CAACM,aAAa,CAAC;IACrDJ,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAEJ,KAAK,CAACO,eAAe,CAAC;IACzDL,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAACQ,SAAS,CAACC,QAAQ,EAAE,CAAC;IACxDP,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAEJ,KAAK,CAACU,OAAO,CAACD,QAAQ,EAAE,CAAC;IACpDP,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAACW,SAAS,CAACF,QAAQ,EAAE,CAAC;IACxDP,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEJ,KAAK,CAACY,SAAS,CAACH,QAAQ,EAAE,CAAC,CAAC,CAAC;IAE1D;IACA,IAAIR,KAAK,EAAE;MACTC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,EAAEA,KAAK,CAACY,IAAI,CAAC;;IAE7C,MAAMC,OAAO,GAAG;MACZhC,OAAO,EAAE,IAAIF,WAAW;MACpB;MACA;KACP;;IAED,OAAO,IAAI,CAACK,IAAI,CAACY,IAAI,CAAM,GAAG,IAAI,CAACkB,MAAM,WAAW,EAAEb,QAAQ,EAAEY,OAAO,CAAC;EAC1E;EAAC;qBA7CU/B,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAiC,SAAXjC,WAAW;IAAAkC,YAFV;EAAM","names":["HttpHeaders","httpOptions","headers","UserService","constructor","http","getAll","get","getUserById","id","recupererMDP","email","numTel","updateUser","user","put","verifyEmail","post","verifyEmailUrl","createEvent","event","image","formData","FormData","append","nomEvenement","lieuEvenement","actionEvenement","dateDebut","toString","dateFin","numPlaces","eventType","name","options","apiUrl","factory","providedIn"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\services\\User.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient,HttpHeaders, HttpErrorResponse} from \"@angular/common/http\";\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { User } from 'src/app/model/User';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' ,'Access-Control-Allow-Origin': 'http://localhost:4200'})\r\n};\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private ajouterurl ='http://localhost:9000/pi/utilisateur/ajout';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  private verifyEmailUrl = 'http://localhost:9000/pi/utilisateur/verify-email'\r\n   /*ajouterUser(User: User): Observable<User> {\r\n    return this.http.post<User>(this.ajouterurl, User, httpOptions);\r\n  }*/\r\n  getAll(){\r\n    return this.http.get<User[]>('http://localhost:9000/pi/utilisateur/getAll')\r\n  }\r\n  getUserById(id:number){\r\n    return this.http.get<User>('http://localhost:9000/pi/utilisateur/getUtilisateurId/'+id)\r\n  }\r\n  recupererMDP(email:String,numTel:String){\r\n    return this.http.get<number>('http://localhost:9000/pi/utilisateur/mdp/'+email+'/'+numTel)\r\n  }\r\n  updateUser(user:User){\r\n    return this.http.put('http://localhost:9000/pi/utilisateur/updateUtilisateur',user)\r\n  }\r\n  verifyEmail(email: string): Observable<any> {\r\n    return this.http.post<any>(this.verifyEmailUrl, { email }, httpOptions);\r\n  }\r\n  createEvent(event: events, image: File | null): Observable<any> {\r\n    const formData = new FormData();\r\n    formData.append('nomEvenement', event.nomEvenement);\r\n    formData.append('lieuEvenement', event.lieuEvenement);\r\n    formData.append('actionEvenement', event.actionEvenement);\r\n    formData.append('dateDebut', event.dateDebut.toString());\r\n    formData.append('dateFin', event.dateFin.toString());\r\n    formData.append('numPlaces', event.numPlaces.toString());\r\n    formData.append('eventType', event.eventType.toString()); // Assuming eventType is of type Event_type\r\n\r\n    //formData.append('image', image, image.name);\r\n    if (image) {\r\n      formData.append('photo', image, image.name);\r\n  }\r\n    const options = {\r\n        headers: new HttpHeaders()\r\n            // Uncomment below line if needed\r\n            // .set('Content-Type', 'multipart/form-data')\r\n    };\r\n\r\n    return this.http.post<any>(`${this.apiUrl}/addEvent`, formData, options);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}