{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet RegisterComponent = class RegisterComponent {\n  constructor(formBuilder, service, rouuter) {\n    this.formBuilder = formBuilder;\n    this.service = service;\n    this.rouuter = rouuter;\n    this.RegisterForm = new FormGroup({\n      nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      motDePasse: new FormControl('', [Validators.required, Validators.minLength(8), Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n      numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')])\n      // role: new FormControl('', [Validators.required]),\n      //interet: new FormControl('', [Validators.required]),\n    });\n  }\n\n  persistUser() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenomUtilisateur: formData.prenomUtilisateur,\n        email: formData.email,\n        numTel: formData.numTel,\n        motDePasse: formData.motDePasse\n        //role:formData.role,\n        //interet:formData.interet,\n      };\n\n      this.service.ajouterUser(UserData).subscribe(response => {\n        console.log('Utilisateur ajoutée avec succès :', response);\n        // Optionally, provide feedback to the user that registration was successful\n      }, error => {\n        console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n        // Check the error status and handle it appropriately\n        if (error.status === 400) {\n          // Bad request error, handle validation errors or other issues\n          // You can access error.error to get the detailed error message from the server\n          // Provide feedback to the user about the error\n        } else {\n          // Handle other types of errors (e.g., server down, network error)\n          // Provide appropriate feedback to the user\n        }\n      });\n    }\n  }\n  ngOnInit() {\n    // Initialization logic here\n    console.log(this.RegisterForm.value);\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAqB,gBAAgB;AAUzE,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAE5BC,YAAoBC,WAAwB,EAAUC,OAAoB,EAAUC,OAAc;IAA9E,gBAAW,GAAXF,WAAW;IAAuB,YAAO,GAAPC,OAAO;IAAuB,YAAO,GAAPC,OAAO;IAE3F,iBAAY,GAAG,IAAIN,SAAS,CAAC;MAC3BO,cAAc,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACnFC,iBAAiB,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MACtFE,KAAK,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACU,KAAK,CAAC,CAAC;MACnEC,UAAU,EAAE,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACQ,SAAS,CAAC,CAAC,CAAC,EAC1ER,UAAU,CAACY,OAAO,CAAC,uCAAuC,CAAC,CAAC,CAAC;MAChEC,MAAM,EAAE,IAAIf,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACY,OAAO,CAAC,UAAU,CAAC,CAAC;MAClF;MACC;KACD,CAAC;EAXoG;;EAatGE,WAAW;IACT,IAAI,IAAI,CAACC,YAAY,CAACC,KAAK,EAAE;MAC3B,MAAMC,QAAQ,GAAG,IAAI,CAACF,YAAY,CAACG,KAAK;MACxC,MAAMC,QAAQ,GAAQ;QACpBb,cAAc,EAAEW,QAAQ,CAACX,cAAc;QACvCG,iBAAiB,EAAEQ,QAAQ,CAACR,iBAAiB;QAC7CC,KAAK,EAAEO,QAAQ,CAACP,KAAK;QACrBG,MAAM,EAAEI,QAAQ,CAACJ,MAAM;QACvBF,UAAU,EAAEM,QAAQ,CAACN;QACrB;QACA;OACD;;MAED,IAAI,CAACP,OAAO,CAACgB,WAAW,CAACD,QAAQ,CAAC,CAACE,SAAS,CACzCC,QAAQ,IAAI;QAEXC,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEF,QAAQ,CAAC;QAC1D;MACF,CAAC,EACAG,KAAwB,IAAI;QAC3BF,OAAO,CAACE,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;QACnE;QACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;UACxB;UACA;UACA;QAAA,CACD,MAAM;UACL;UACA;QAAA;MAEJ,CAAC,CACF;;EAEL;EAEAC,QAAQ;IACN;IACAJ,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,YAAY,CAACG,KAAK,CAAC;EAEtC;CAED;AAxDYjB,iBAAiB,eAL7BJ,SAAS,CAAC;EACT+B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GACW7B,iBAAiB,CAwD7B;SAxDYA,iBAAiB","names":["Component","FormControl","FormGroup","Validators","RegisterComponent","constructor","formBuilder","service","rouuter","nomUtilisateur","required","minLength","prenomUtilisateur","email","motDePasse","pattern","numTel","persistUser","RegisterForm","valid","formData","value","UserData","ajouterUser","subscribe","response","console","log","error","status","ngOnInit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\1ESPRIT\\pi\\front\\pi-angular\\src\\app\\register\\register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { UserService } from 'src/app/services/User.service';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Role } from '../model/User';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n \n  constructor(private formBuilder: FormBuilder, private service: UserService, private rouuter:Router) { }\n\n  RegisterForm = new FormGroup({\n    nomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    prenomUtilisateur: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    motDePasse: new FormControl('', [Validators.required, Validators.minLength(8),\n       Validators.pattern('^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9]).*$')]),\n    numTel: new FormControl('', [Validators.required, Validators.pattern('[0-9]{8}')]),\n   // role: new FormControl('', [Validators.required]),\n    //interet: new FormControl('', [Validators.required]),\n  });\n\n  persistUser() {\n    if (this.RegisterForm.valid) {\n      const formData = this.RegisterForm.value;\n      const UserData: any = {\n        nomUtilisateur: formData.nomUtilisateur,\n        prenomUtilisateur: formData.prenomUtilisateur,\n        email: formData.email,\n        numTel: formData.numTel,\n        motDePasse: formData.motDePasse,\n        //role:formData.role,\n        //interet:formData.interet,\n      };\n\n      this.service.ajouterUser(UserData).subscribe(\n        (response) => {\n\n          console.log('Utilisateur ajoutée avec succès :', response);\n          // Optionally, provide feedback to the user that registration was successful\n        },\n        (error: HttpErrorResponse) => {\n          console.error('Erreur lors de l\\'ajout de l\\'utilisateur :', error);\n          // Check the error status and handle it appropriately\n          if (error.status === 400) {\n            // Bad request error, handle validation errors or other issues\n            // You can access error.error to get the detailed error message from the server\n            // Provide feedback to the user about the error\n          } else {\n            // Handle other types of errors (e.g., server down, network error)\n            // Provide appropriate feedback to the user\n          }\n        }\n      );\n    }\n  }\n\n  ngOnInit() {\n    // Initialization logic here\n    console.log(this.RegisterForm.value);\n\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}